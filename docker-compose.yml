services:
  service:
    image: copp:service-login-latest
    container_name: login
    #restart: always
    networks:
      - backend
    depends_on:
      - kafka
    #build:
    #  context: C:\Users\jze99\Desktop\copp\server\service-login
    #  dockerfile: .

  api:
    image: copp:api-lasted
    container_name: api
    #restart: always
    ports:
      - "8000:8000"
    networks:
      - backend
    depends_on:
      - kafka
    #build:
    #  context: C:\Users\jze99\Desktop\copp\server\api
    #  dockerfile: .
  
  api_data_base:
    image: copp:api-data-base-lasted
    container_name: api-data-base
    #restart: always
    ports:
      - "8001:8001"
    networks:
      - backend
    #build:
    #  context: C:\Users\jze99\Desktop\copp\server\api-data-base
    #  dockerfile: .

  kafka:
      image: 'bitnami/kafka:latest'
      container_name: kafka
      networks:
        - backend
      environment:
        - KAFKA_CFG_NODE_ID=0
        - KAFKA_CFG_PROCESS_ROLES=controller,broker
        - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
        - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
        - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
        - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER


  redis:
    image: 'redis:latest'
    networks:
      - backend
    ports:
      - "6379:6379"
  postgres:
    image: postgres:latest
    container_name: postgres
    #restart: always
    ports:
      - "5000:5432"
    networks:
      - backend
    environment:
      - POSTGRES_PASSWORD=postgres
      - PGDATA = /var/lib/postgresql/data/pgdata
    volumes:
      - C:\Users\jze99\Documents\postgres-docker-docker:/var/lib/postgresql/data

networks:
  backend:
    driver: bridge